!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
FrankeFunction	frankefunction.py	/^def FrankeFunction(x,y):$/;"	f
MSE	frankefunction.py	/^def MSE(target, model): $/;"	f
R2	frankefunction.py	/^def R2(target, model):$/;"	f
X	frankefunction.py	/^X = create_X(row_arr, col_arr, maxdegree)$/;"	v
X_test	frankefunction.py	/^X_train = X[train_indices]; X_test = X[test_indices]$/;"	v
X_test_scaled	frankefunction.py	/^X_test_scaled = X_test-np.mean(X_test)$/;"	v
X_train	frankefunction.py	/^X_train = X[train_indices]; X_test = X[test_indices]$/;"	v
X_train_scaled	frankefunction.py	/^X_train_scaled = X_train-np.mean(X_train)$/;"	v
ax1	frankefunction.py	/^ax1 = fig1.gca(projection='3d')$/;"	v
beta	frankefunction.py	/^beta = np.linalg.inv(X_train_scaled.T@X_train_scaled) @ X_train_scaled.T @ z_arr_train_scaled$/;"	v
col_arr	frankefunction.py	/^col_arr = col_mat.ravel()$/;"	v
col_mat	frankefunction.py	/^row_mat, col_mat = np.meshgrid(colsort, rowsort)$/;"	v
colsort	frankefunction.py	/^colsort         =       rand_col[sortcolindex]$/;"	v
confidences	frankefunction.py	/^confidences = z_*np.sqrt(var_beta)$/;"	v
create_X	frankefunction.py	/^def create_X(x, y, n ):$/;"	f
fig1	frankefunction.py	/^fig1 = plt.figure()$/;"	v
maxdegree	frankefunction.py	/^maxdegree = 5$/;"	v
ncol	frankefunction.py	/^ncol = 200$/;"	v
noise	frankefunction.py	/^noise = .01$/;"	v
np	frankefunction.py	/^import numpy as np$/;"	I
nrow	frankefunction.py	/^nrow = 100$/;"	v
plt	frankefunction.py	/^import matplotlib.pyplot as plt$/;"	I
rand_col	frankefunction.py	/^rand_col        =       np.random.uniform(0, 1, size=ncol)$/;"	v
rand_row	frankefunction.py	/^rand_row        =       np.random.uniform(0, 1, size=nrow)$/;"	v
row_arr	frankefunction.py	/^row_arr = row_mat.ravel()$/;"	v
row_mat	frankefunction.py	/^row_mat, col_mat = np.meshgrid(colsort, rowsort)$/;"	v
rowsort	frankefunction.py	/^rowsort         =       rand_row[sortrowindex]$/;"	v
sortcolindex	frankefunction.py	/^sortcolindex    =       np.argsort(rand_col)$/;"	v
sortrowindex	frankefunction.py	/^sortrowindex    =       np.argsort(rand_row)$/;"	v
split_data	frankefunction.py	/^def split_data(data, test_ratio=0.2):$/;"	f
surf	frankefunction.py	/^surf = ax1.plot_surface(row_mat, col_mat, z, cmap=cm.coolwarm,$/;"	v
test_indices	frankefunction.py	/^train_indices, test_indices = split_data(X)$/;"	v
train_indices	frankefunction.py	/^train_indices, test_indices = split_data(X)$/;"	v
var_beta	frankefunction.py	/^var_beta = np.diag(np.linalg.inv(X_train_scaled.T@X_train_scaled))$/;"	v
z	frankefunction.py	/^z = FrankeFunction(row_mat, col_mat) + noise*np.random.randn(nrow, ncol)$/;"	v
z_	frankefunction.py	/^z_ = 1.96 # from wikipedia for confidence of 95%$/;"	v
z_arr	frankefunction.py	/^z_arr = z.ravel()$/;"	v
z_arr_test	frankefunction.py	/^z_arr_train = z_arr[train_indices]; z_arr_test = z_arr[test_indices]$/;"	v
z_arr_test_scaled	frankefunction.py	/^z_arr_test_scaled = z_arr_test-np.mean(z_arr_test)$/;"	v
z_arr_train	frankefunction.py	/^z_arr_train = z_arr[train_indices]; z_arr_test = z_arr[test_indices]$/;"	v
z_arr_train_scaled	frankefunction.py	/^z_arr_train_scaled = z_arr_train-np.mean(z_arr_train)$/;"	v
z_pred	frankefunction.py	/^z_pred = X_test_scaled @ beta$/;"	v
z_tilde	frankefunction.py	/^z_tilde = X_train_scaled @ beta$/;"	v
