diff burp.py frankefunction.py > py.diff
31d30
< 
36,37c35,38
<     Input is the data/input and the target/output as well as an optional ratio for test 
<     and training data. The permutation numpy option randomizes the order of the range given
---
>     takes the data for the problem
>     outputs test and training indices for the ratio given.
> 
>     The numpy  permutation option randomizes the order of the range given
46,47c47,52
< def R2(y, y_tilde):
<     return 1 - ( np.sum( (y-y_tilde)**2 )/np.sum( (y-np.mean(y))**2 ) )
---
> def R2(target, model):
>     return 1 - ( np.sum( (target-model)**2 )/np.sum( (target-np.mean(target))**2 ) )
> 
> def MSE(target, model): 
>     n = np.size(target)
>     return np.sum( (target-model)**2 )/n
49,51d53
< def MSE(y, y_tilde): 
<     n = np.size(y)
<     return np.sum( (y-y_tilde)**2 )/n
80,107c82,93
< maxdeg = 5
< X = create_X(row_arr, col_arr, maxdeg)
< X_train, X_test, z_train, z_test = split_data(X,z_arr)# z.ravel())
< beta = np.linalg.inv(X_train.T @ X_train) @ X_train.T @ z_train
< z_tilde = X_train @ beta
< z_pred = X_test @ beta
< 
< MSE_train = MSE(z_train, z_tilde)
< MSE_test = MSE(z_test, z_pred)
< #print("MSE_train:   ", MSE_train)
< #print("MSE_test:    ", MSE_test)
< #
< #
< #fig2 = plt.figure()
< #ax2 = fig2.gca(projection='3d')
< ## Plot the surface.
< #surf = ax2.plot_surface(x, y, z, cmap=cm.coolwarm,
< #                       linewidth=0, antialiased=False)
< #
< ## Customize the z axis.
< #ax2.set_zlim(-0.10, 1.40)
< #ax2.zaxis.set_major_locator(LinearLocator(10))
< #ax2.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
< #
< ## Add a color bar which maps values to colors.
< #fig2.colorbar(surf, shrink=0.5, aspect=5)
< #
< #plt.show()
---
> 
> maxdegree = 5
> X = create_X(x, y, maxdegree)
> X_train, X_test, z_arr_train, z_arr_test = split_data(X, z_arr)
> 
> 
> beta = np.linalg.inv( X_train.T @ X_train ) @ X_train.T @ z_arr_train
> #beta = np.linalg.inv( X_train.T @ X_train ) @ X_train.T @ z_train
> 
> #z_tilde = X_train @ beta
> #z_pred = X_test @ beta
> #print("train MSE: {:.3f}".format(MSE(z_arr_train, z_tilde)))
